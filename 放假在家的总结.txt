Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-01-26T12:03:44+08:00

====== 放假在家的总结 ======
Created 星期四 26 一月 2017

1.对程序编译的步骤:
	1）预处理：宏定义展开、头文件展开、条件编译，这里并不会检查语法
	2）编译：检查语法，将预处理后文件编译生成汇编文件
	3）汇编：将汇编文件生成目标文件(二进制文件)
	4）链接：将目标文件链接为可执行程序
2.在指针声明时,*号表示所声明的变量为指针
  在指针使用时,*号表示操作指针所指向的内存空间
	1) *相当通过地址找到指针指向的内存,在操作内存
	2) *放在等号的左边赋值(给内存赋值,写内存)
	3) *放在等号的右边取值(从内存中取值,读内存)
3.指针是一种数据类型,是指它指向的内存空间的数据类型,指针所指向的内存空间决定了指针的步长.
4.指针的间接赋值成立的三个条件:
	1)2个变量(一个普通变量一个指针变量 或者一个实参一个形参)
	eg:两个变量: int a = 100; int *p = NULL;
	2)建立关系
	eg:建立关系: p = &a;
	3)通过*操作指针指向的内存
	eg:*p = 22;
5.间接赋值的推论:
	用N级指针形参,去间接修改了N-1级指针(实参)的值
6.指针做函数参数,具备了输入和输出特性:
	输入:主调函数分配内存
	输出:被调函数分配内存
7.sprintf
	#include <stdio.h>
	int sprintf(char *str, const char *format, ...);
	功能：
		 根据参数format字符串来转换并格式化数据，然后将结果输出到str指定的空间中，直到    出现字符串结束符 '\0'  为止。
	参数： 
		str：字符串首地址
		format：字符串格式，用法和printf()一样
	返回值：
		成功：实际格式化的字符个数
		失败： - 1
	EG:
	//1. 格式化字符串
		char buf[1024] = { 0 };
		sprintf(buf, "你好,%s,欢迎加入我们!", "John");
		printf("buf:%s\n",buf);
	
		memset(buf, 0, 1024);
		sprintf(buf, "我今年%d岁了!", 20);
		printf("buf:%s\n", buf);
	
		//2. 拼接字符串
		memset(buf, 0, 1024);
		char str1[] = "hello";
		char str2[] = "world";
		int len = sprintf(buf,"%s %s",str1,str2);
		printf("buf:%s len:%d\n", buf,len);
	
		//3. 数字转字符串
		memset(buf, 0, 1024);
		int num = 100;
		sprintf(buf, "%d", num);
		printf("buf:%s\n", buf);
		//设置宽度 右对齐
		memset(buf, 0, 1024);
		sprintf(buf, "%8d", num);
		printf("buf:%s\n", buf);
		//设置宽度 左对齐
		memset(buf, 0, 1024);
		sprintf(buf, "%-8d", num);
		printf("buf:%s\n", buf);
		//转成16进制字符串 小写
		memset(buf, 0, 1024);
		sprintf(buf, "0x%x", num);
		printf("buf:%s\n", buf);
	
		//转成8进制字符串
		memset(buf, 0, 1024);
		sprintf(buf, "0%o", num);
		printf("buf:%s\n", buf);

一级指针的易错点:
	1.越界!
	2.指针叠加会不断改变指针指向!
	3.返回局部变量的地址!
	4.同一块内存释放多次

const修饰指针
	const放在*号左侧, 修饰指针指向的内存空间不能修改,但可以修改指针的指向
	const放在*号的右侧,修饰之后怎的指向不能修改,但是可以修改指针指向的内存空间





















